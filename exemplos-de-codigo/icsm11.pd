#N canvas 0 0 1280 700 16;
#X declare -lib ofelia;
#N canvas 0 0 450 300 icsm11_ 0;
#X obj 0 100 loadbang;
#X msg 0 150 \; pd-icsm11.pd vis 1 \; pd-icsm11_ vis 0 \; pd-icsm11A
vis 0 \; pd-icsm11B vis 0 \; pd-icsm11C vis 0;
#N canvas 0 0 1280 700 icsm11A 0;
#X obj 1100 650 icsm_anterior icsm11A icsm11.pd;
#X obj 1150 650 icsm_sobe icsm11A icsm1.pd;
#X obj 1200 650 icsm_proximo icsm11A icsm11B;
#X obj 100 92 cnv 15 14 14 empty empty Transdutores 0 0 0 24 -262144
-38 0;
#X text 100 145 Transdutores são instrumentos cujo propósito é converter
energia ou informação de uma forma para outra., f 107;
#X text 100 195 Por exemplo \, o OUVIDO humano pode ser visto como
um transdutor que converte variações da pressão atmosférica em
impulsos eletroquímicos no nervo auditivo., f 107;
#X text 100 265 O MICROFONE é um transdutor que converte a pressão
sonora no ar em sinais elétricos contínuos \, através de um material
com características PIEZOELÉTRICAS (piézo em grego significa pressionar)
\; no caminho inverso \, o ALTO-FALANTE converte sinais elétricos
em energia mecânica através do movimento de uma membrana \, que por
sua vez produz variações da pressão do ar., f 107;
#X text 100 375 Em um braço de toca-discos de vinil há uma CÁPSULA
FONOCAPTORA que converte a vibração mecânica da agulha sobre os
sulcos gravados em um sinal elétrico \, sendo que a gravação desses
mesmos sulcos é realizada por um processo semelhante de transdução
\, em sentido oposto., f 107;
#X text 100 465 O termo ANALÓGICO \, usado para designar os sinais
de tempo contínuo que representam atributos físicos tão diversos
quanto pressão \, tensão elétrica e posição espacial \, se refere
à analogia (proporcionalidade) entre as formas dessas representações.
, f 107;
#X coords 0 0 1 1 100 100 0;
#X restore 0 0 pd icsm11A;
#N canvas 0 0 1280 700 icsm11B 0;
#X obj 1100 650 icsm_anterior icsm11B icsm11A;
#X obj 1150 650 icsm_sobe icsm11B icsm1.pd;
#X obj 1200 650 icsm_proximo icsm11B icsm11C;
#X obj 100 92 cnv 15 14 14 empty empty Conversão_AD 0 0 0 24 -262144
-38 0;
#X text 100 272 No ambiente Puredata \, existe um objeto chamado [adc~]
que representa a entrada sonora e o sinal fornecido pelo circuito ADC.
O trecho de código abaixo realiza a captura de 2 segundos do microfone
e permite a visualização do sinal digitalizado:, f 107;
#X obj 710 356 adc~;
#X obj 782 356 bng 24 250 50 0 \$0_copia_adc_dac empty Clique_aqui_para_iniciar_a_captura
26 12 0 14 -262144 -1 -1;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_sinal_adc 88200 float 2;
#X coords 0 1 88200 -1 1080 140 1 0 0;
#X restore 102 446 graph;
#X msg 102 374 \; pd dsp \$1;
#N canvas 0 0 1280 700 icsm11B++ 0;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm11B++ vis 1;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm11B++ vis 1;
#X obj 100 92 cnv 15 14 14 empty empty Mais_detalhes_da_Conversão_AD_(*)
0 0 0 24 -262144 -38 0;
#X text 100 145 A fim de preparar o sinal analógico para sua conversão
em sinal digital \, diversos passos intermediários devem ser realizados:
, f 107;
#X text 100 205 1) Filtragem passa-baixas: como veremos em breve \,
um sinal digital com taxa de amostragem R só é capaz de representar
componentes senoidais com frequências abaixo de R/2 (veja o "Teorema
de Nyquist"). Por essa razão \, o circuito ADC remove componentes
acima desse limiar \, a fim de que não sejam incorretamente representadas
(através do fenômeno do "Rebatimento")., f 107;
#X text 100 305 2) Amostragem a R Hz: essa é a etapa em que o sinal
é "fotografado" periodicamente em intervalos de 1/R segundos \, através
de um circuito denominado sample-and-hold ("amostra-e-segura") produzindo
um sinal em forma de escadas (uma função constante em cada trecho
de 1/R segundos)., f 107;
#X text 100 385 3) Quantização com N bits: o circuito quantizador
aproxima o valor de cada amostra (tomada no meio do intervalo de duração
1/R segundos) por um dos 2^N códigos disponíveis (aquele que melhor
representar o valor medido). Os códigos podem ser distribuídos linearmente
pela faixa de valores admissíveis do sinal analógico (quantização
linear) \, ou de acordo com outras distribuições (quantização logarítmica
em ponto flutuante \, μ-law \, etc)., f 107;
#X text 100 505 Os códigos produzidos pelo último passo podem ser
expressos em diversos formatos de dados: inteiros com ou sem sinal
e com os bytes dispostos do mais para o menos significativo (big-endian)
ou vice-versa (little-endian) \, valores em ponto flutuante \, etc.
O processo de digitalização também pode ser usado para gerar sinais
elétricos \, usando codificações como PCM (Pulse Code Modulation
\, onde cada bit do código é representado por um pulso retangular)
e PAM/PWM (Pulse Amplitude/Width Modulation) \, entre outros., f 107
;
#X text 6 801 +detalhes(*):;
#X connect 0 0 1 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 994 234 pd icsm11B++;
#X obj 710 405 tabwrite~ \$0_sinal_adc;
#N canvas 0 0 1280 700 icsm11B+ 0;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm11B+ vis 1;
#X text 30 25 Procure sempre próximo às implementações botões
com comentários adicionais sobre os códigos em Puredata. Como essa
é nossa primeira implementação "explícita" \, o comentário será
mais detalhado \, mas com o processo de familiarização com a linguagem
muitas construções passam a ser auto-explicativas e a necessidade
de comentários passa para as construções mais complicadas. Várias
outras implementações estão "escondidas" neste material \, e não
serão comentadas porque não fazem parte do conteúdo \, alem de serem
desnecessariamente complicadas nesse ponto da exposição., f 120
;
#X text 60 572 A terceira parte é formada pelo objeto [adc~] \, que
recebe a entrada de áudio (microfone) e envia esse sinal para o objeto
[tabwrite~] \, que inicia o processo de escrita no vetor \$0_sinal_adc
assim que recebe uma mensagem |bang< (disparo) \, produzida pelo objeto
de mesmo nome (a interface gráfica do tipo "botão")., f 117;
#X text 30 130 Um programa em Puredata é chamado de PATCH (um termo
que se refere à maneira como se conectam unidades de processamento
de áudio em estúdios) \, e consiste geralmente de fluxogramas compostos
por objetos (caixas) \, mensagens (caixas com uma endentação "<"
à direita) e suas interconexões \, além de comentários (como esse).
Mensagens e objetos (incluídas aqui as interfaces gráficas) podem
ser criados através do menu "Inserir" \, ou de atalhos como Control-1
(Objeto) \, Control-2 (Mensagem) \, etc. Conexões são criadas clicando-se
com o mouse e arrastando a partir de uma saída (outlet \, localizado
na parte inferior dos objetos e mensagens) até uma entrada (inlet
\, parte superior). Todos os objetos nativos do Pd possuem explicações
que podem ser acessadas com o botão direito do mouse em "Ajuda". Além
disso \, muitos objetos também terão as opções "Propriedades" (para
controlar parâmetros que definem o objeto) e "Abrir" (para visualizar
sua implementação). Fique à vontade para explorá-los!, f 120;
#X text 30 311 O programa que vimos tem 3 "partes" (componentes visuais):
, f 120;
#X text 60 466 A segunda parte é o próprio vetor que recebe o sinal.
Ele foi criado com o Menu Inserir->Vetor e configurado para receber
88200 amostras (2 segundos de áudio a 44100 Hz). Seu nome começa
com \$0 (um identificador único associado a cada instância do patch)
a fim de permitir que o patch possa ser aberto duas ou mais vezes sem
provocar conflitos por nomes idênticos. Você pode inspecionar os
valores armazenados no vetor clicando sobre ele com o botão da direita
em "Propriedades" e selecionando "Abrir visualização em lista".,
f 117;
#X text 6 801 comentários:;
#X text 60 341 A primeira parte consiste em uma chave liga-desliga
(objeto [toggle] do Pd) conectado a uma mensagem | \; pd dsp \$1<.
A chave envia "0" ou "1" quando é clicada \, e esse valor substitui
o argumento \$1 na mensagem para o objeto "pd" (núcleo do Pd): "dsp
1" e "dsp 0" significam respectivamente ligar e desligar o DSP (Digital
Signal Processing ou Processamento Digital de Sinais). O ponto-e-vírgula
do início diz que a mensagem será enviada a um objeto nomeado (e
não através de conexões "por cabo"). A caixa identificada por DSP
na tela principal do Pd faz exatamente a mesma coisa \, mas aqui esse
controle está embutido no nosso próprio patch., f 117;
#X connect 0 0 1 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 101 600 pd icsm11B+;
#X text 291 605 <- Clique aqui para entender a implementação;
#X text 100 135 A CONVERSÃO ANALÓGICO-DIGITAL (Analog-to-Digital-Conversion
= ADC) é o processo realizado em hardware para transformar a representação
analógica de um sinal elétrico (entrada de linha ou microfone) na
representação discreta/digital utilizada pelos computadores. Esse
processo possui várias etapas \, cujo detalhamento foge ao nosso escopo
\, mas que podem ser encontradas no link +detalhes(*) \, se houver
interesse. Por enquanto \, é suficiente compreender que essa conversão
produz uma lista de valores numéricos que pode ser armazenada em uma
estrutura de dados linear e indexada \, ou seja \, da forma x[0] \,
x[1] \, x[2] \, etc., f 107;
#X text 173 341 <- Clique aqui para ligar o processamento de áudio
;
#X obj 102 341 tgl 24 0 \$0_dsp \$0_dsp_r DSP 28 12 0 18 -262144 -1
-1 1 1;
#N canvas 0 0 741 643 mágica 0;
#X obj 47 243 spigot;
#X obj 167 228 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X msg 114 303 0;
#X obj 167 170 loadbang;
#X msg 167 199 1;
#X obj 47 274 t f b;
#X obj 47 303 pipe 1;
#X obj 47 361 pipe 1;
#X obj 48 494 loadbang;
#X obj 48 523 del 1;
#X text 142 492 pega o estado global do DSP ao carregar o patch;
#X obj 47 332 t b f;
#X text 41 30 Esse subpatch conecta todos os toggles DSP sem criar
loops infinitos, f 25;
#X obj 47 117 r \$0_dsp;
#X obj 47 417 s \$0_dsp_r;
#X obj 48 602 s \$0_dsp;
#X obj 340 332 adc~;
#X obj 392 332 r \$0_copia_adc_dac;
#X obj 340 371 tabwrite~ \$0_sinal_dac;
#X text 337 278 transfere o conteúdo da tabela do subpatch 11B para
o 11C, f 30;
#X obj 280 553 declare -lib ofelia;
#X obj 48 553 ofelia f \; return ofGetDspState();
#X connect 0 0 5 0;
#X connect 1 0 0 1;
#X connect 2 0 1 0;
#X connect 3 0 4 0;
#X connect 4 0 1 0;
#X connect 5 0 6 0;
#X connect 5 1 2 0;
#X connect 6 0 11 0;
#X connect 7 0 4 0;
#X connect 8 0 9 0;
#X connect 9 0 21 0;
#X connect 11 0 7 0;
#X connect 11 1 14 0;
#X connect 13 0 0 0;
#X connect 16 0 18 0;
#X connect 16 1 18 0;
#X connect 17 0 18 0;
#X connect 21 0 15 0;
#X coords 0 -1 1 1 2 2 2 100 100;
#X restore 1180 586 pd mágica;
#X connect 5 0 10 0;
#X connect 5 1 10 0;
#X connect 6 0 10 0;
#X connect 15 0 8 0;
#X coords 0 0 1 1 100 100 0;
#X restore 150 0 pd icsm11B;
#N canvas 0 0 1280 700 icsm11C 0;
#X obj 1100 650 icsm_anterior icsm11C icsm11B;
#X obj 1150 650 icsm_sobe icsm11C icsm1.pd;
#X obj 1200 650 icsm_proximo icsm11C icsm12.pd;
#X obj 100 92 cnv 15 14 14 empty empty Conversão_DA 0 0 0 24 -262144
-38 0;
#X obj 760 321 bng 24 250 50 0 empty empty Clique_aqui_para_iniciar_a_reprodução
26 12 0 14 -262144 -1 -1;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_sinal_dac 88200 float 2;
#X coords 0 1 88200 -1 1080 140 1 0 0;
#X restore 102 446 graph;
#X obj 102 325 tgl 24 0 \$0_dsp \$0_dsp_r DSP 28 12 0 18 -262144 -1
-1 1 1;
#X msg 102 354 \; pd dsp \$1;
#X obj 760 392 dac~;
#X obj 760 353 tabplay~ \$0_sinal_dac;
#N canvas 0 0 1280 700 icsm11C+ 0;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm11C+ vis 1;
#X obj 100 92 cnv 15 14 14 empty empty Mais_detalhes_da_Conversão_DA_(*)
0 0 0 24 -262144 -38 0;
#X text 100 145 A conversão DA também é realizada em uma sequência
de passos intermediários:, f 107;
#X text 100 345 2) "Deglitcher": como é fisicamente impossível garantir
a simultaneidade da abertura das portas do DAC a cada ciclo de 1/R
segundos \, o sinal produzido pelo DAC tipicamente possui "transientes"
bastante ruidosos entre os trechos da forma de onda em escadas que
se esperaria. Essa etapa é essencialmente o mesmo circuito "sample-and-hold"
do processo ADC \, que aqui mede os valores no meio dos intervalos
de 1/R segundos e assim removem os transientes ruidosos causados pelo
módulo ADC., f 107;
#X text 100 465 3) Filtragem passa-baixas: a forma de onda analógica
em escadas não corresponde ao sinal digital armazenado \, pois ela
contém muitas frequências acima do limite de representação digital
(R/2 Hz). Um filtro passa-baixas remove essas componentes geradas pelo
DAC+Deglitcher \, produzindo um sinal analógico que corresponde o
mais fielmente possível à representação discreta da entrada do
DAC., f 107;
#X text 100 205 1) Módulo DAC: o circuito mais importante dentro do
processo DAC recebe o mesmo nome do processo todo. Sua responsabilidade
é produzir um sinal de tempo contínuo que se atualiza a cada 1/R
segundos de acordo com o valor de amplitude associado aos códigos
do sinal digital. Esse circuito possui N "portas" \, associadas a cada
bit da representação binária do valor de amplitude \, e que retêm
(=0) ou deixam fluir (=1) correntes proporcionais exponencialmente
à posição do bit no código (com valores α \, 2α \, 4α \, 8α
...). A soma das correntes das portas abertas compõem o sinal entregue
à etapa seguinte., f 107;
#X text 6 801 +detalhes(*):;
#X connect 0 0 1 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 994 189 pd icsm11C+;
#X text 100 145 A CONVERSÃO DIGITAL-ANALÓGICA (Digital-to-Analog-Conversion
= DAC) também é realizada em hardware e transforma o sinal digital
em um sinal elétrico (saída de linha \, alto-falante ou fone-de-ouvido)
\, sendo que mais uma vez o detalhamento desse processo foge ao nosso
escopo., f 107;
#X text 100 234 No ambiente Puredata \, o objeto [dac~] representa
a saída sonora e direciona sinais do patch para o circuito DAC. O
trecho de código abaixo reproduz o trecho de 2 segundos capturado
anteriormente usando o objeto [tabplay~] \, que é a contrapartida
do [tabwrite~]:, f 107;
#X connect 4 0 9 0;
#X connect 6 0 7 0;
#X connect 9 0 8 0;
#X connect 9 0 8 1;
#X coords 0 0 1 1 100 100 0;
#X restore 300 0 pd icsm11C;
#X connect 0 0 1 0;
#X coords 0 -1 1 1 2 2 2 0 0;
#X restore 0 0 pd icsm11_;
#X obj 1100 650 icsm_anterior icsm11.pd icsm1.pd;
#X obj 1150 650 icsm_sobe icsm11.pd icsm1.pd;
#X obj 1200 650 icsm_proximo icsm11.pd icsm11A;
#X obj 0 0 icsm_cabecalho;
#X obj 100 200 cnv 15 14 14 empty empty 1.1_Som_e_sinal:_conversões_AD/DA
0 0 0 34 -262144 -38 0;
#X text 100 350 SINAL é um modelo matemático utilizado para representar
a variação de um atributo em função de uma variável. No nosso
caso \, o SINAL SONORO representa a variação da pressão do ar em
função do tempo. Um sinal sonoro é dito ANALÓGICO quando está
definido para todos os instantes de tempo em um intervalo da reta real
\, associando-os a valores reais de pressão. Em contrapartida \, um
sinal sonoro DIGITAL está definido tipicamente em uma LISTA FINITA
de instantes no tempo \, associando-os a valores de pressão dentre
outra LISTA FINITA., f 107;
#X text 100 250 SOM é um fenômeno físico que ocorre quando as moléculas
do ar (ou de outro meio elástico) se adensam e rarefazem rapidamente
\, criando padrões oscilatórios que se propagam através do meio.
Para serem percebidos como som pelo ouvido humano \, tais padrões
de variação da pressão do ar devem estar compreendidos num intervalo
de aproximadamente 20 Hz (Hz = Hertz = ciclos completos por segundo)
a aproximadamente 20 kHz., f 107;
#X text 100 490 A conversão entre SOM e SINAL corresponde a um processo
de TRANSDUÇÃO \, e as conversões entre SINAIS ANALÓGICOS e DIGITAIS
e vice-versa são denominadas respectivamente ADC e DAC \, como veremos
a seguir., f 107;
#X coords 0 0 1 1 100 100 0;
