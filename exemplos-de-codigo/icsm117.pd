#N canvas 0 0 1280 700 16;
#X declare -lib zexy;
#X declare -lib zexy;
#X declare -lib zexy;
#X declare -lib zexy;
#X declare -lib zexy;
#X declare -lib zexy;
#X obj 0 0 icsm_cabecalho;
#X obj 100 200 cnv 15 14 14 empty empty 1.1.7_Quantização_e_SQNR
0 0 0 34 -262144 -38 0;
#N canvas 0 0 1280 700 icsm117A 0;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm117A vis 1;
#N canvas 0 0 1280 700 icsm117B 0;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm117B vis 1;
#N canvas 0 0 1280 700 icsm117C 0;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm117C vis 1;
#N canvas 0 0 1280 700 icsm117D 0;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm117D vis 1;
#N canvas 0 0 1280 700 icsm117E 0;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm117E vis 1;
#N canvas 0 0 1280 700 icsm117F 0;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm117F vis 1;
#N canvas 0 0 1280 700 icsm117G 0;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm117G vis 1;
#N canvas 0 0 1280 700 icsm117H 0;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm117H vis 1;
#X obj 100 100 cnv 15 14 14 empty empty Experimento_com_Quantização_Não_Linear
0 0 0 24 -262144 -38 0;
#X floatatom 517 223 5 1 24 0 N°Bits_= #0_117H_B_r #0_117H_B;
#X obj 425 263 vradio 24 1 1 3 \$0_117H_muxQ \$0_117H_muxQ_r empty
0 -8 0 10 -262130 -1 -1 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117H_sinal 882 float 0;
#X coords 0 1.1 881 -1.1 500 280 1 0 0;
#X restore 680 267 graph;
#X obj 103 241 icsm_dsp;
#X text 457 263 SINAL ORIGINAL;
#X text 457 286 SINAL QUANTIZADO;
#X text 457 311 RUÍDO DE QUANTIZAÇÃO;
#X obj 309 395 hsl 128 20 0.001 1 1 0 empty \$0_117H_vol_r Volume -2
-8 0 16 -262144 -1 -1 0 0;
#X floatatom 306 419 8 0 1 0 - - #0_117H_vol;
#X text 292 394 0;
#X text 440 394 1;
#X obj 106 293 tgl 24 0 \$0_117H_mute \$0_117H_mute_r MUTE 28 12 0
18 -262130 -1 -1 0 1;
#X obj 109 395 hsl 128 20 20 2000 1 0 empty \$0_117H_freq_r Frequência
-2 -8 0 16 -262144 -1 -1 0 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117H_sinal_quantizado 882 float 0;
#X coords 0 1.1 881 -1.1 500 280 1 0 0;
#X restore 680 267 graph;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117H_sinal_quantizado_e_ruído 882 float 0;
#X coords 0 1.1 881 -1.1 500 280 1 0 0;
#X restore 680 267 graph;
#X floatatom 106 419 8 0 1 0 - - #0_117H_freq;
#X floatatom 382 474 7 0 0 1 - #0_117H_sqnr -;
#X text 103 473 Relação Sinal-Ruído (SQNR):;
#X obj 225 243 vradio 24 1 1 4 \$0_117H_muxS \$0_117H_muxS_r empty
0 -8 0 10 -262130 -1 -1 0;
#X text 257 243 SILÊNCIO;
#X text 257 268 SENOIDE;
#X text 257 291 MICROFONE;
#X text 257 315 ARQUIVO;
#X obj 336 318 bng 20 250 50 0 \$0_117H_load empty empty 17 7 0 10
-262130 -1 -1;
#N canvas 0 0 450 300 init 0;
#X obj 57 44 loadbang;
#X obj 57 73 f \$0;
#X obj 210 11 r pd;
#X obj 210 40 route dsp;
#X obj 210 69 sel 0;
#X msg 57 113 \; \$1_117H_freq_r 0 \; \$1_117H_vol_r 0 \; \$1_117H_muxS_r
0 \; \$1_117H_muxQ_r 0 \; \$1_117H_mute_r 0 \; \$1_117H_B_r 8;
#X connect 0 0 1 0;
#X connect 1 0 5 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 1 0;
#X restore 1182 828 pd init;
#N canvas 0 0 778 421 \$0_117H_síntese 0;
#X obj 28 324 multiplex~ _ _ _ _;
#X obj 220 325 declare -lib zexy;
#X obj 87 131 osc~;
#X obj 87 169 *~;
#X obj 87 70 pack f 50;
#X obj 87 99 line~;
#X obj 247 70 pack f 50;
#X obj 247 99 line~;
#X obj 324 167 adc~;
#X obj 507 70 openpanel;
#X obj 507 128 readsf~;
#X obj 507 167 *~;
#X obj 324 216 *~;
#X msg 507 99 open \$1 \, 1;
#X obj 28 353 outlet~;
#X obj 87 41 r \$0_117H_freq;
#X obj 247 41 r \$0_117H_vol;
#X obj 507 41 r \$0_117H_load;
#X obj 28 261 r \$0_117H_muxS;
#X connect 0 0 14 0;
#X connect 2 0 3 0;
#X connect 3 0 0 1;
#X connect 4 0 5 0;
#X connect 5 0 2 0;
#X connect 6 0 7 0;
#X connect 7 0 3 1;
#X connect 7 0 11 1;
#X connect 7 0 12 1;
#X connect 8 0 12 0;
#X connect 8 1 12 0;
#X connect 9 0 13 0;
#X connect 10 0 11 0;
#X connect 11 0 0 3;
#X connect 12 0 0 2;
#X connect 13 0 10 0;
#X connect 15 0 4 0;
#X connect 16 0 6 0;
#X connect 17 0 9 0;
#X connect 18 0 0 0;
#X restore 106 528 pd \$0_117H_síntese;
#N canvas 0 0 1053 657 \$0_117H_quantização 0;
#X obj 206 294 -~;
#X obj 502 268 loadbang;
#X obj 502 326 t b b b;
#X text 271 419 calcula energia em dB;
#X obj 211 502 -;
#X text 258 503 SQNR;
#X obj 263 447 env~;
#X obj 211 473 env~;
#X obj 220 335 declare -lib zexy;
#X obj 27 59 inlet~;
#X obj 28 492 outlet~;
#X obj 28 334 multiplex~ _ _ _;
#X obj 28 271 r \$0_117H_muxQ;
#X obj 533 20 r \$0_117H_B;
#X obj 533 49 expr pow(2 \, $f1)-1;
#X text 725 49 μ;
#X obj 533 78 t f f;
#X obj 146 117 expr~ round($f2*log(1+$f2*abs($v1))/log(1+$f2))/$f2
;
#X obj 146 180 expr~ copysign($v1 \, $v2);
#X obj 211 538 s \$0_117H_sqnr;
#X obj 569 445 tabwrite~ \$0_117H_sinal_quantizado_e_ruído;
#X obj 535 405 tabwrite~ \$0_117H_sinal_quantizado;
#X obj 502 365 tabwrite~ \$0_117H_sinal;
#X text 673 116 q(x);
#X text 501 148 d(q(x));
#X text 403 181 conserta sinal;
#X obj 502 297 metro 200 64 samp;
#X obj 146 146 expr~ (pow(1+$f2 \, abs($v1))-1)/$f2;
#X connect 0 0 6 0;
#X connect 0 0 11 2;
#X connect 0 0 20 0;
#X connect 1 0 26 0;
#X connect 2 0 22 0;
#X connect 2 1 21 0;
#X connect 2 2 20 0;
#X connect 4 0 19 0;
#X connect 6 0 4 1;
#X connect 7 0 4 0;
#X connect 9 0 0 0;
#X connect 9 0 7 0;
#X connect 9 0 11 0;
#X connect 9 0 17 0;
#X connect 9 0 18 1;
#X connect 9 0 22 0;
#X connect 11 0 10 0;
#X connect 12 0 11 0;
#X connect 13 0 14 0;
#X connect 14 0 16 0;
#X connect 16 0 17 1;
#X connect 16 1 27 1;
#X connect 17 0 27 0;
#X connect 18 0 0 1;
#X connect 18 0 11 1;
#X connect 18 0 21 0;
#X connect 26 0 2 0;
#X connect 27 0 18 0;
#X restore 106 563 pd \$0_117H_quantização;
#N canvas 0 0 301 280 \$0_117H_saída 0;
#X obj 51 202 dac~;
#X obj 51 151 *~;
#X obj 98 106 expr 1-$f1;
#X obj 51 33 inlet~;
#X obj 98 77 r \$0_117H_mute;
#X connect 1 0 0 0;
#X connect 1 0 0 1;
#X connect 2 0 1 1;
#X connect 3 0 1 0;
#X connect 4 0 2 0;
#X restore 106 599 pd \$0_117H_saída;
#X text 100 150 Nessa implementação submetemos uma fonte sonora a
um esquema de quantização logarítmica com B bits usando μ-law.
Observe como o ruído acompanha o volume do sinal \, mantendo a relação
sinal-ruído praticamente fixa., f 107;
#X connect 1 0 2 0;
#X connect 11 0 12 0;
#X connect 16 0 19 0;
#X connect 29 0 30 0;
#X connect 30 0 31 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm117H;
#X obj 100 80 cnv 15 14 14 empty empty Relação_Sinal-Ruído_na_Quantização_Não-Linear
0 0 0 24 -262144 -38 0;
#X text 705 371 SQNR = 20·log10(Amp_Sinal/Amp_Ruído);
#N canvas 0 0 1280 700 \$0_icsm117Gfig 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117G_sinal 512 float 2;
#X coords 0 1 512 -1 500 220 1 0 0;
#X restore 24 86 graph;
#X obj 565 4 loadbang;
#X floatatom 45 29 5 1 32 1 bits #0_117G_bits_r #0_117G_bits_s;
#X text 573 388 Preenche a tabela com a função sen(2πfn/R) com f=2
;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117G_sinal_quantizado 512 float 2;
#X coords 0 1 512 -1 500 220 1 0 0;
#X restore 24 86 graph;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117G_sinal_quantizado_e_erro 512 float 0;
#X coords 0 1 511 -1 500 220 1 0 0;
#X restore 24 86 graph;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117G_sinal_quantizado_e_erro_ 512 float 0;
#X coords 0 1 511 -1 500 220 1 0 0;
#X restore 24 86 graph;
#X obj 565 180 t f f;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117G_s 512 float 2;
#X coords 0 1 512 -1 500 220 1 0 0;
#X restore 24 86 graph;
#X text 563 93 Recebe valor de B;
#X text 21 393 Amplitude (pico) do ruído:;
#X text 782 93 Recebe volume;
#X obj 815 4 loadbang;
#X msg 815 33 1;
#X text 21 28 B=;
#X floatatom 280 29 8 0 1 0 Volume #0_117G_vol_r #0_117G_vol;
#X text 366 28 <- experimente shift+arrastar, f 14;
#X obj 565 151 f;
#X obj 785 150 t b b f f;
#X obj 565 360 pack f f;
#X text 654 359 (B \, vol);
#X obj 565 61 s \$0_117G_bits_r;
#X obj 815 61 s \$0_117G_vol_r;
#X obj 565 121 r \$0_117G_bits_s;
#X obj 785 121 r \$0_117G_vol;
#X obj 612 326 s \$0_117G_res_amp_r;
#X text 21 333 Mínima amplitude representável:;
#X obj 612 209 expr pow(2 \, $f1)-1;
#X text 21 363 Faixa Dinâmica (dB):;
#X text 21 423 Relação Sinal-Ruído (SQNR dB):;
#X obj 847 326 s \$0_117G_faixa_r;
#X obj 612 258 expr (pow(1+$f1 \, 1/$f1)-1)/$f1;
#X text 805 207 =μ;
#X text 925 258 d(q)=((1+μ)^(1/μ)-1)/μ;
#X text 688 234 mín.ampl. representável (com q(x)=1/μ):;
#X text 904 3 inicializa vol=1;
#X obj 612 287 t f f;
#X text 1054 293 faixa din.(dB);
#X obj 847 293 expr 20*log10(1/$f1);
#X msg 565 33 4;
#X text 654 3 inicializa B=4;
#X floatatom 340 424 7 0 0 1 - #0_117G_sqnr_r #0_117G_sqnr;
#X floatatom 340 334 7 0 0 1 - #0_117G_res_amp_r -;
#X floatatom 340 394 7 0 0 1 - #0_117G_amp_erro -;
#X floatatom 340 364 7 0 0 1 - #0_117G_faixa_r -;
#X msg 565 902 \; \$3_117G_sqnr_r \$2 \; \$3_117G_amp_erro \$1 \;;
#X msg 880 34 0;
#X msg 620 35 3;
#X obj 565 420 ofelia f \; local x = ofArray("\$0_117G_sinal") \; local
y = ofArray("\$0_117G_sinal_quantizado") \; local z = ofArray("\$0_117G_sinal_quantizado_e_erro")
\; local w = ofArray("\$0_117G_sinal_quantizado_e_erro_") \; local
N = x:getSize() \; local L=2^a[1]-1 \; local erro=0 \; local sqnr=0
\; for i = 0 \, N-1 do \; x[i] = a[2]*math.sin(2*math.pi*2*i/N) \;
y[i] = math.floor(0.5+L*math.log(1+L*math.abs(x[i]))/math.log(1+L))/L
\; y[i] = ((1+L)^y[i]-1)/L \; y[i] = (x[i]<0 and -y[i]) or y[i] \;
z[i] = (i%2==0 and x[i]) or y[i] \; w[i] = x[i]-y[i] \; erro = math.max(erro
\, math.abs(w[i])) \; sqnr = sqnr+w[i]^2 \; end \; if a[2]==0 then
return ofTable(0 \, 0 \, \$0) --[[para evitar log(0)]] \; else return
ofTable( erro \, 10* ( math.log(a[2]*math.sqrt(2)/2) - math.log(sqnr/N)
) / math.log(10) \, \$0 ) \; end \;;
#X f 66;
#X connect 1 0 39 0;
#X connect 7 0 19 0;
#X connect 7 1 27 0;
#X connect 12 0 13 0;
#X connect 13 0 22 0;
#X connect 17 0 7 0;
#X connect 18 1 17 0;
#X connect 18 2 19 1;
#X connect 19 0 48 0;
#X connect 23 0 17 0;
#X connect 24 0 18 0;
#X connect 27 0 31 0;
#X connect 31 0 36 0;
#X connect 36 0 25 0;
#X connect 36 1 38 0;
#X connect 38 0 30 0;
#X connect 39 0 21 0;
#X connect 46 0 22 0;
#X connect 47 0 21 0;
#X connect 48 0 45 0;
#X coords 0 -1 1 1 550 480 2 0 0;
#X restore 101 140 pd \$0_icsm117Gfig;
#X text 658 140 Aqui podemos visualizar o ERRO DE QUANTIZAÇÃO ε[n]=x[n]-d(q(x[n]))
para um esquema de QUANTIZAÇÃO LOGARÍTMICA. Observe como a amplitude
do erro varia em função da amplitude do sinal., f 51;
#X text 658 227 Podemos estimar a RELAÇÃO SINAL-RUÍDO de maneira
simples para o esquema de QUANTIZAÇÃO EM PONTO FLUTUANTE. Considere
que são usados N bits para a MANTISSA: então o maior valor de amplitude
em qualquer ORDEM DE GRANDEZA p estará associado a m=2^N \, e o maior
erro será de metade da largura dos intervalos de quantização nesse
nível. Assim:, f 51;
#X text 755 411 = 20·log10(2m);
#X text 755 431 = 20·log10(2^(N+1));
#X text 705 549 FAIXA = 20·log10(L/(1·2^(1·N)));
#X text 765 569 = 20·log10(2^(N·(1+2^P))/2^N);
#X text 765 589 = 20·log10(2^(N·2^P));
#X text 658 481 Além disso podemos estimar a FAIXA DINÂMICA em dB
como a razão entre a máxima e a mínima amplitude representáveis:
, f 51;
#X text 755 451 ~ 6·(N+1) (<- independe do sinal);
#X text 755 391 = 20·log10(m2^(pN)/(½·2^(pN)));
#X text 765 609 ~ 6·N·2^P;
#X text 655 629 (cada bit em P DOBRA a faixa);
#X connect 1 0 2 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm117G;
#X obj 100 80 cnv 15 14 14 empty empty Esquemas_de_Quantização_Não_Linear
0 0 0 24 -262144 -38 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117F_d(q(x))_logarítmica 1024 float 0;
#X coords 0 1 1023 0 300 200 1 0 0;
#X restore 100 143 graph;
#X floatatom 451 353 8 1 24 0 B= #0_117F_B_r #0_117F_B;
#X text 86 332 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117F_d(q(x))_pontoflutuante 1024 float 0;
#X coords 0 1 1023 0 300 200 1 0 0;
#X restore 100 403 graph;
#X text 93 602 0;
#N canvas 0 0 918 708 init 0;
#X obj 61 25 loadbang;
#X obj 223 88 r \$0_117F_B;
#X msg 223 175 symbol logarítmica \, symbol pontoflutuante;
#X obj 353 88 r \$0_117F_P;
#X obj 223 117 t b f;
#X obj 353 117 t b f;
#X obj 488 117 t b f;
#X obj 488 88 r \$0_117F_N;
#X obj 223 238 pack s f f f;
#X obj 61 54 f \$0;
#X obj 223 274 ofelia f \; local x=ofArray("\$0_117F_d(q(x))_"..a[1])
\; local N=x:getSize() \; local L \; if a[1]=="logarítmica" then L=2^a[2]-1
\; else L=2^(a[4]*(1+2^a[3])) end \; for n=0 \, N-1 do \; xn = (n+1)/N
\; if a[1]=="logarítmica" then \; x[n] = math.floor(0.5+L*math.log(1+L*xn)/math.log(1+L))/L
\; x[n] = ((1+L)^x[n]-1)/L \; else \; p = math.floor(math.log(xn*L)/math.log(2)/a[4])
\; if p<=0 then x[n]=0 else \; m = math.floor(0.5+xn*L/2^(p*a[4]))
\; x[n]=m*2^(p*a[4])/L \; end \; end \; end \;;
#X f 64;
#X text 349 238 (esquema \, B \, P \, N);
#X msg 61 83 \; \$1_117F_B_r 3 \; \$1_117F_P_r 2 \; \$1_117F_N_r 2
;
#X connect 0 0 9 0;
#X connect 1 0 4 0;
#X connect 2 0 8 0;
#X connect 3 0 5 0;
#X connect 4 0 2 0;
#X connect 4 1 8 1;
#X connect 5 0 2 0;
#X connect 5 1 8 2;
#X connect 6 0 2 0;
#X connect 6 1 8 3;
#X connect 7 0 6 0;
#X connect 8 0 10 0;
#X connect 9 0 12 0;
#X restore 1178 826 pd init;
#X text 96 342 0;
#X text 83 592 0;
#X text 391 602 1;
#X floatatom 581 570 8 1 12 0 P= #0_117F_P_r #0_117F_P;
#X floatatom 451 570 8 1 12 0 N= #0_117F_N_r #0_117F_N;
#X text 392 342 1;
#X text 86 133 1;
#X text 86 393 1;
#X obj 1150 335 icsm_url https://en.wikipedia.org/wiki/%CE%9C-law_algorithm
;
#X text 956 337 μ-LAW na Wikipedia:;
#X text 426 137 Existem vários esquemas de QUANTIZAÇÃO NÃO-LINEAR
que visam MELHORAR a SQNR em sinais de baixa amplitude \, aumentando
assim a FAIXA DINÂMICA DA REPRESENTAÇÃO (relação entre a máxima
e mínima amplitudes representáveis)., f 75;
#X text 426 207 Na QUANTIZAÇÃO LOGARÍTMICA usando o algoritmo μ-LAW
\, os valores de amplitude representáveis são distribuídos de forma
logarítmica de acordo com o mapeamento q(x) = sgn(x)· round(μ·log(1+μ·|x|)/log(1+μ))/μ
\, com dequantização dada por d(q) = sgn(q)· ((1+μ)^|q|-1)/μ.
A imagem ao lado mostra a composição d(q(x)) no intervalo [0 \, 1]
para μ=2^B (sem incluir o bit de sinal). Observe que essa "escadinha"
possui μ degraus de largura progressivamente maior., f 75;
#X text 426 407 Numa QUANTIZAÇÃO EM PONTO FLUTUANTE são usados B
= P+N bits \, onde P bits representam EXPOENTES e N bits representam
MANTISSAS em valores da forma n·2^(pN). Usando por exemplo p = 1 \,
... \, 2^P e n = 1 \, ... \, 2^N \, o maior valor representável é
L = 2^(N·(1+2^P)) e os códigos podem ser obtidos como p(x) = floor(log2(x·L)/N)
e n(x) = round(x·L/2^(p(x)·N)). A imagem ao lado mostra o gráfico
de d(q(x)) no intervalo [0 \, 1]. Observe os grupos de 2^N degraus
de altura igual \, que evidenciam a QUANTIZAÇÃO LINEAR que ocorre
dentro de cada ORDEM DE GRANDEZA associada a cada expoente p., f 75
;
#X connect 1 0 2 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm117F;
#X obj 100 100 cnv 15 14 14 empty empty Experimento_com_Dithering 0
0 0 24 -262144 -38 0;
#X floatatom 517 223 5 1 24 0 N°Bits_= #0_117E_B_r #0_117E_B;
#X obj 425 263 vradio 24 1 1 3 \$0_117E_muxQ \$0_117E_muxQ_r empty
0 -8 0 10 -262130 -1 -1 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117E_sinal 882 float 0;
#X coords 0 1.1 881 -1.1 500 280 1 0 0;
#X restore 680 267 graph;
#X obj 103 241 icsm_dsp;
#X text 457 263 SINAL ORIGINAL;
#X text 457 286 SINAL QUANTIZADO;
#X text 457 311 RUÍDO DE QUANTIZAÇÃO;
#X obj 269 395 hsl 128 20 0.001 1 1 0 empty \$0_117E_vol_r Volume -2
-8 0 16 -262144 -1 -1 0 0;
#X floatatom 266 419 8 0 1 0 - - #0_117E_vol;
#X text 252 394 0;
#X text 400 394 1;
#X obj 106 293 tgl 24 0 \$0_117E_mute \$0_117E_mute_r MUTE 28 12 0
18 -262130 -1 -1 0 1;
#X obj 109 395 hsl 128 20 20 2000 1 0 empty \$0_117E_freq_r Frequência
-2 -8 0 16 -262144 -1 -1 0 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117E_sinal_quantizado 882 float 0;
#X coords 0 1.1 881 -1.1 500 280 1 0 0;
#X restore 680 267 graph;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117E_sinal_quantizado_e_ruído 882 float 0;
#X coords 0 1.1 881 -1.1 500 280 1 0 0;
#X restore 680 267 graph;
#X floatatom 106 419 8 0 1 0 - - #0_117E_freq;
#X floatatom 382 474 7 0 0 1 - #0_117E_sqnr -;
#X text 103 473 Relação Sinal-Ruído (SQNR):;
#X obj 225 243 vradio 24 1 1 4 \$0_117E_muxS \$0_117E_muxS_r empty
0 -8 0 10 -262130 -1 -1 0;
#X text 257 243 SILÊNCIO;
#X text 257 268 SENOIDE;
#X text 257 291 MICROFONE;
#X text 257 315 ARQUIVO;
#X obj 336 318 bng 20 250 50 0 \$0_117E_load empty empty 17 7 0 10
-262130 -1 -1;
#N canvas 0 0 450 300 init 0;
#X obj 57 44 loadbang;
#X obj 57 73 f \$0;
#X obj 210 11 r pd;
#X obj 210 40 route dsp;
#X obj 210 69 sel 0;
#X msg 57 113 \; \$1_117E_freq_r 0 \; \$1_117E_vol_r 0 \; \$1_117E_muxS_r
0 \; \$1_117E_muxQ_r 0 \; \$1_117E_muxD_r 0 \; \$1_117E_mute_r 0 \;
\$1_117E_B_r 8;
#X connect 0 0 1 0;
#X connect 1 0 5 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 1 0;
#X restore 1182 828 pd init;
#N canvas 0 0 778 421 \$0_117E_síntese 0;
#X obj 28 324 multiplex~ _ _ _ _;
#X obj 220 325 declare -lib zexy;
#X obj 87 131 osc~;
#X obj 87 169 *~;
#X obj 87 70 pack f 50;
#X obj 87 99 line~;
#X obj 247 70 pack f 50;
#X obj 247 99 line~;
#X obj 324 167 adc~;
#X obj 507 70 openpanel;
#X obj 507 128 readsf~;
#X obj 507 167 *~;
#X obj 324 216 *~;
#X msg 507 99 open \$1 \, 1;
#X obj 28 353 outlet~;
#X obj 87 41 r \$0_117E_freq;
#X obj 247 41 r \$0_117E_vol;
#X obj 507 41 r \$0_117E_load;
#X obj 28 261 r \$0_117E_muxS;
#X connect 0 0 14 0;
#X connect 2 0 3 0;
#X connect 3 0 0 1;
#X connect 4 0 5 0;
#X connect 5 0 2 0;
#X connect 6 0 7 0;
#X connect 7 0 3 1;
#X connect 7 0 11 1;
#X connect 7 0 12 1;
#X connect 8 0 12 0;
#X connect 8 1 12 0;
#X connect 9 0 13 0;
#X connect 10 0 11 0;
#X connect 11 0 0 3;
#X connect 12 0 0 2;
#X connect 13 0 10 0;
#X connect 15 0 4 0;
#X connect 16 0 6 0;
#X connect 17 0 9 0;
#X connect 18 0 0 0;
#X restore 106 528 pd \$0_117E_síntese;
#N canvas 0 0 301 280 \$0_117E_saída 0;
#X obj 51 202 dac~;
#X obj 51 151 *~;
#X obj 98 106 expr 1-$f1;
#X obj 51 33 inlet~;
#X obj 98 77 r \$0_117E_mute;
#X connect 1 0 0 0;
#X connect 1 0 0 1;
#X connect 2 0 1 1;
#X connect 3 0 1 0;
#X connect 4 0 2 0;
#X restore 106 599 pd \$0_117E_saída;
#N canvas 0 0 1280 700 \$0_117E_quantização_e_dither 0;
#X obj 206 364 -~;
#X obj 382 458 loadbang;
#X obj 382 487 metro 100 64 samp;
#X obj 382 516 t b b b;
#X text 635 246 no [expr~] os blocos de áudio são denotados por $v
\, enquanto parâmetros float são $f como no [expr]., f 38;
#X obj 587 49 expr 2/pow(2 \, $f1);
#X text 150 488 calcula energia em dB;
#X obj 211 572 -;
#X text 258 573 SQNR;
#X obj 263 517 env~;
#X obj 211 543 env~;
#X obj 220 405 declare -lib zexy;
#X obj 233 277 expr~ -1+$f2/2+$f2*(floor(($v1+1)/$f2));
#X obj 27 99 inlet~;
#X text 295 250 q(x) = -1+L/2+L·floor((x[n]+1)/L);
#X text 779 49 L;
#X obj 28 562 outlet~;
#X obj 28 404 multiplex~ _ _ _;
#X obj 28 341 r \$0_117E_muxQ;
#X obj 587 20 r \$0_117E_B;
#X obj 382 555 tabwrite~ \$0_117E_sinal;
#X obj 415 595 tabwrite~ \$0_117E_sinal_quantizado;
#X obj 449 635 tabwrite~ \$0_117E_sinal_quantizado_e_ruído;
#X obj 211 608 s \$0_117E_sqnr;
#X obj 312 108 noise~;
#X obj 233 197 multiplex~ _ _ _;
#X obj 233 65 r \$0_117E_muxD;
#X text 382 108 Dither branco;
#X text 562 136 Dither violeta;
#X obj 233 306 +~;
#X obj 862 40 r \$0_117E_muxS;
#X obj 862 69 sel 0;
#X msg 862 98 0;
#X text 860 11 não usa dither no silêncio;
#X obj 587 78 t f f f;
#X obj 862 128 s \$0_117E_muxD_r;
#X obj 312 137 expr~ $f2*0.5*$v1;
#X obj 391 167 fexpr~ 0.125*($x1[0]-3*$x1[-1]+3*$x1[-2]-$x1[-3]);
#X connect 0 0 9 0;
#X connect 0 0 17 2;
#X connect 0 0 22 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 20 0;
#X connect 3 1 21 0;
#X connect 3 2 22 0;
#X connect 5 0 34 0;
#X connect 7 0 23 0;
#X connect 9 0 7 1;
#X connect 10 0 7 0;
#X connect 12 0 29 0;
#X connect 13 0 0 0;
#X connect 13 0 10 0;
#X connect 13 0 12 0;
#X connect 13 0 17 0;
#X connect 13 0 20 0;
#X connect 17 0 16 0;
#X connect 18 0 17 0;
#X connect 19 0 5 0;
#X connect 24 0 36 0;
#X connect 25 0 12 0;
#X connect 26 0 25 0;
#X connect 29 0 17 1;
#X connect 29 0 0 1;
#X connect 29 0 21 0;
#X connect 30 0 31 0;
#X connect 31 0 32 0;
#X connect 32 0 35 0;
#X connect 34 0 36 1;
#X connect 34 1 12 1;
#X connect 36 0 25 1;
#X connect 36 0 37 0;
#X connect 37 0 25 2;
#X restore 106 563 pd \$0_117E_quantização_e_dither;
#X obj 435 373 vradio 24 1 1 3 \$0_117E_muxD \$0_117E_muxD_r DITHERING
0 -12 0 16 -262130 -1 -1 0;
#X text 467 373 DESLIGADO;
#X text 467 396 BRANCO;
#X text 467 421 VIOLETA;
#X text 100 140 Adaptamos a implementação anterior para incluir ruído
com amplitude L/2 antes e depois da quantização. Nessa versão \,
o ruído de dither pode ser branco \, com energia distribuída de maneira
igual por todo o espectro \, ou violeta \, com maior energia nas altas
frequências (menos audíveis dependendo do sinal)., f 107;
#X connect 1 0 2 0;
#X connect 12 0 13 0;
#X connect 17 0 20 0;
#X connect 30 0 32 0;
#X connect 32 0 31 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm117E;
#X obj 100 100 cnv 15 14 14 empty empty Compensação_do_erro_de_quantização_(Dithering)
0 0 0 24 -262144 -38 0;
#X obj 1150 546 icsm_url https://en.wikipedia.org/wiki/Dither;
#X text 100 260 A ideia é interferir de forma aleatória no processo
de quantização \, fazendo com que valores entre dois níveis de quantização
diferentes sejam "empurrados" ora para cima ora para baixo \, de forma
proporcional conforme sua posição no intervalo. Por exemplo \, para
a quantização em valores inteiros \, desejamos garantir que o valor
0.1 seja "empurrado" para 0 em 90% das vezes \, e para 1 apenas em
10% das vezes., f 107;
#X text 100 150 A técnica de DITHERING consiste na adição de um
ruído específico (denominado DITHER) antes do processo de quantização
\, a fim de atenuar a dependência do ruído de quantização em relação
ao conteúdo espectral do sinal \, perceptível especialmente em trechos
com forte conteúdo harmônico e também em trechos de baixa amplitude
(onde a relação sinal-ruído é menor)., f 107;
#X text 100 380 Um mecanismo muito simples para atingir esse objetivo
no caso da quantização linear é adicionar ao sinal um ruído de
amplitude L/2 \, onde L é a resolução de amplitude da quantização
\, ou seja \, a distância entre dois níveis de quantização sucessivos.
, f 107;
#X text 100 480 Adicionalmente \, pode-se manipular o conteúdo espectral
desse ruído a fim de concentrar em determinadas faixas de frequência
o efeito de mascaramento da dependência do ruído de quantização
em relação ao sinal., f 107;
#X text 946 549 Dither na Wikipedia:;
#X connect 1 0 2 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm117D;
#X obj 100 100 cnv 15 14 14 empty empty Experimento_com_Quantização_Linear
0 0 0 24 -262144 -38 0;
#X floatatom 517 263 5 1 24 0 N°Bits_= #0_117C_B_r #0_117C_B;
#X obj 425 303 vradio 24 1 1 3 \$0_117C_muxQ \$0_117C_muxQ_r empty
0 -8 0 10 -262130 -1 -1 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117C_sinal 882 float 0;
#X coords 0 1.1 881 -1.1 500 280 1 0 0;
#X restore 680 287 graph;
#X obj 103 281 icsm_dsp;
#X text 457 303 SINAL ORIGINAL;
#X text 457 326 SINAL QUANTIZADO;
#X text 457 351 RUÍDO DE QUANTIZAÇÃO;
#N canvas 0 0 778 421 \$0_117C_síntese 0;
#X obj 28 324 multiplex~ _ _ _ _;
#X obj 247 41 r \$0_117C_vol;
#X obj 220 325 declare -lib zexy;
#X obj 87 41 r \$0_117C_freq;
#X obj 87 131 osc~;
#X obj 87 169 *~;
#X obj 87 70 pack f 50;
#X obj 87 99 line~;
#X obj 247 70 pack f 50;
#X obj 247 99 line~;
#X obj 28 261 r \$0_117C_muxS;
#X obj 324 167 adc~;
#X obj 507 41 r \$0_117C_load;
#X obj 507 70 openpanel;
#X obj 507 128 readsf~;
#X obj 507 167 *~;
#X obj 324 216 *~;
#X msg 507 99 open \$1 \, 1;
#X obj 28 353 outlet~;
#X connect 0 0 18 0;
#X connect 1 0 8 0;
#X connect 3 0 6 0;
#X connect 4 0 5 0;
#X connect 5 0 0 1;
#X connect 6 0 7 0;
#X connect 7 0 4 0;
#X connect 8 0 9 0;
#X connect 9 0 5 1;
#X connect 9 0 15 1;
#X connect 9 0 16 1;
#X connect 10 0 0 0;
#X connect 11 0 16 0;
#X connect 11 1 16 0;
#X connect 12 0 13 0;
#X connect 13 0 17 0;
#X connect 14 0 15 0;
#X connect 15 0 0 3;
#X connect 16 0 0 2;
#X connect 17 0 14 0;
#X restore 106 538 pd \$0_117C_síntese;
#X obj 309 425 hsl 128 20 0.001 1 1 0 empty \$0_117C_vol_r Volume -2
-8 0 16 -262144 -1 -1 0 0;
#X floatatom 306 449 8 0 1 0 - - #0_117C_vol;
#X text 292 424 0;
#X text 440 424 1;
#X obj 106 333 tgl 24 0 \$0_117C_mute \$0_117C_mute_r MUTE 28 12 0
18 -262130 -1 -1 0 1;
#X obj 109 425 hsl 128 20 20 2000 1 0 empty \$0_117C_freq_r Frequência
-2 -8 0 16 -262144 -1 -1 0 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117C_sinal_quantizado 882 float 0;
#X coords 0 1.1 881 -1.1 500 280 1 0 0;
#X restore 680 287 graph;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117C_sinal_quantizado_e_ruído 882 float 0;
#X coords 0 1.1 881 -1.1 500 280 1 0 0;
#X restore 680 287 graph;
#X floatatom 106 449 8 0 1 0 - - #0_117C_freq;
#X floatatom 382 494 7 0 0 1 - #0_117C_sqnr -;
#X text 103 493 Relação Sinal-Ruído (SQNR):;
#N canvas 0 0 450 300 init 0;
#X obj 57 44 loadbang;
#X obj 57 73 f \$0;
#X obj 210 11 r pd;
#X obj 210 40 route dsp;
#X obj 210 69 sel 0;
#X msg 57 113 \; \$1_117C_freq_r 0 \; \$1_117C_vol_r 0 \; \$1_117C_muxS_r
0 \; \$1_117C_muxQ_r 0 \; \$1_117C_mute_r 0 \; \$1_117C_B_r 8;
#X connect 0 0 1 0;
#X connect 1 0 5 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 1 0;
#X restore 1182 828 pd init;
#N canvas 0 0 1053 549 \$0_117C_quantização 0;
#X obj 206 224 -~;
#X obj 533 40 r \$0_117C_B;
#X obj 502 295 tabwrite~ \$0_117C_sinal;
#X obj 502 198 loadbang;
#X obj 502 256 t b b b;
#X obj 535 335 tabwrite~ \$0_117C_sinal_quantizado;
#X obj 569 375 tabwrite~ \$0_117C_sinal_quantizado_e_ruído;
#X text 548 116 no [expr~] os blocos de áudio são denotados por $v
\, enquanto parâmetros float são $f como no [expr]., f 38;
#X obj 533 69 expr 2/pow(2 \, $f1);
#X text 271 349 calcula energia em dB;
#X obj 211 468 s \$0_117C_sqnr;
#X obj 211 432 -;
#X text 258 433 SQNR;
#X obj 263 377 env~;
#X obj 211 403 env~;
#X obj 220 265 declare -lib zexy;
#X obj 146 147 expr~ -1+$f2/2+$f2*(floor(($v1+1)/$f2));
#X obj 37 59 inlet~;
#X text 208 120 q(x) = -1+L/2+L·floor((x[n]+1)/L);
#X text 725 69 L;
#X obj 28 422 outlet~;
#X obj 28 201 r \$0_117C_muxQ;
#X obj 28 264 multiplex~ _ _ _;
#X obj 502 227 metro 200 64 samp;
#X connect 0 0 6 0;
#X connect 0 0 13 0;
#X connect 0 0 22 2;
#X connect 1 0 8 0;
#X connect 3 0 23 0;
#X connect 4 0 2 0;
#X connect 4 1 5 0;
#X connect 4 2 6 0;
#X connect 8 0 16 1;
#X connect 11 0 10 0;
#X connect 13 0 11 1;
#X connect 14 0 11 0;
#X connect 16 0 0 1;
#X connect 16 0 5 0;
#X connect 16 0 22 1;
#X connect 17 0 0 0;
#X connect 17 0 2 0;
#X connect 17 0 14 0;
#X connect 17 0 16 0;
#X connect 17 0 22 0;
#X connect 21 0 22 0;
#X connect 22 0 20 0;
#X connect 23 0 4 0;
#X restore 106 573 pd \$0_117C_quantização;
#N canvas 0 0 301 280 \$0_117C_saída 0;
#X obj 51 202 dac~;
#X obj 51 151 *~;
#X obj 98 77 r \$0_117C_mute;
#X obj 98 106 expr 1-$f1;
#X obj 51 33 inlet~;
#X connect 1 0 0 0;
#X connect 1 0 0 1;
#X connect 2 0 3 0;
#X connect 3 0 1 1;
#X connect 4 0 1 0;
#X restore 106 609 pd \$0_117C_saída;
#X obj 225 283 vradio 24 1 1 4 \$0_117C_muxS \$0_117C_muxS_r empty
0 -8 0 10 -262130 -1 -1 0;
#X text 257 283 SILÊNCIO;
#X text 257 308 SENOIDE;
#X text 257 331 MICROFONE;
#X text 257 355 ARQUIVO;
#X obj 336 358 bng 20 250 50 0 \$0_117C_load empty empty 17 7 0 10
-262130 -1 -1;
#X text 100 140 Nessa implementação temos um oscilador senoidal submetido
a um esquema de quantização linear com B bits. Uma observação importante
nesse experimento diz respeito à natureza do ruído de quantização
\, que reflete as periodicidades do sinal original \, sendo estatisticamente
dependente daquele \, ao contrário de um ruído aditivo típico \,
como o ruído de fita magnética (tape hiss) ou disco de vinil \, que
é independente do sinal. Experimente também ouvir outras fontes de
sinal \, como o microfone ou um arquivo de áudio., f 107;
#X connect 1 0 2 0;
#X connect 12 0 25 0;
#X connect 13 0 14 0;
#X connect 18 0 21 0;
#X connect 25 0 26 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm117C;
#X obj 100 80 cnv 15 14 14 empty empty Erro_da_Quantização_Linear
0 0 0 24 -262144 -38 0;
#X text 98 230 No caso de um sinal conhecido \, como um sinal senoidal
\, uma onda quadrada ou mesmo o ruído \, é possível estimar a relação
entre o sinal e o ruído de quantização a partir da razão entre
as amplitudes de pico pela expressão, f 52;
#X text 155 336 SQNR = 20·log10(Amp_Sinal/Amp_Ruído);
#X text 205 356 = 20·log10(Amp_Sinal/(L/2));
#X text 205 376 = 20·log10(Amp_Sinal)+20·log10(2^B);
#X text 98 120 Podemos expressar o sinal ε[n] \, associado ao ERRO
DE QUANTIZAÇÃO \, usando o mapa composto d(q(x)) \, de onde ε[n]=x[n]-d(q(x[n]))=x[n]+1-L/2-L·floor((x[n]+1)/L)
\, no caso de usarmos como representante dos intervalos seus respectivos
pontos médios., f 52;
#X text 205 396 ~ 20·log10(Amp_Sinal)+6·B;
#X text 98 426 Essa expressão mostra duas coisas importantes:;
#X text 150 446 1) cada bit acrescenta ~6 dB na SQNR;
#X text 150 486 2) a SQNR piora com sinais mais fracos;
#X text 98 526 O gráfico ao lado ilustra um sinal senoidal original
"contínuo" e uma versão quantizada linearmente com B bits \, evidenciando
o erro de quantização e também a relação sinal ruído., f 52
;
#N canvas 0 0 1280 700 \$0_icsm117Bfig 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117B_sinal 512 float 2;
#X coords 0 1 512 -1 500 220 1 0 0;
#X restore 24 86 graph;
#X obj 565 4 loadbang;
#X floatatom 45 29 5 1 32 1 bits #0_117B_bits_r #0_117B_bits_s;
#X floatatom 300 334 7 0 0 1 - #0_117B_res_amp_r -;
#X text 21 333 Resolução de amplitude:;
#X text 573 388 Preenche a tabela com a função sen(2πfn/R) com f=2
;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117B_sinal_quantizado 512 float 2;
#X coords 0 1 512 -1 500 220 1 0 0;
#X restore 24 86 graph;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117B_sinal_quantizado_e_erro 512 float 0;
#X coords 0 1 511 -1 500 220 1 0 0;
#X restore 24 86 graph;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117B_sinal_quantizado_e_erro_ 512 float 0;
#X coords 0 1 511 -1 500 220 1 0 0;
#X restore 24 86 graph;
#X obj 565 180 t f f;
#X floatatom 300 364 7 0 0 1 - #0_117B_amp_erro -;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117B_s 512 float 2;
#X coords 0 1 512 -1 500 220 1 0 0;
#X restore 24 86 graph;
#X text 563 93 Recebe valor de B;
#X text 899 205 Calcula resolução de amplitude e erro., f 21;
#X floatatom 300 394 7 0 0 1 - #0_117B_sqnr -;
#X text 21 393 Relação Sinal-Ruído (SQNR):;
#X text 21 363 Amplitude (pico) do ruído:;
#X text 654 3 inicializa B=3;
#X msg 565 33 3;
#X text 28 468 Esse subpatch utiliza as opções "Mostrar gráfico
no patch pai" e "Esconder nome e argumentos" \, o que permite apresentar
uma interface limpa dentro da região definida pelo retângulo vermelho.
, f 52;
#X text 782 93 Recebe volume;
#X obj 815 4 loadbang;
#X msg 815 33 1;
#X text 904 3 inicializa vol;
#X text 21 28 B=;
#X floatatom 280 29 8 0 1 0 Volume #0_117B_vol_r #0_117B_vol;
#X text 366 28 <- experimente shift+arrastar, f 14;
#X obj 565 151 f;
#X obj 785 150 t b b f f;
#X obj 612 209 expr 2/pow(2 \, $f1) \; 1/pow(2 \, $f1) \; 20*log10($f2*pow(2
\, $f1));
#X obj 565 360 pack f f;
#X text 654 359 (B \, vol);
#X obj 565 420 ofelia f \; local x = ofArray("\$0_117B_sinal") \; local
y = ofArray("\$0_117B_sinal_quantizado") \; local z = ofArray("\$0_117B_sinal_quantizado_e_erro")
\; local w = ofArray("\$0_117B_sinal_quantizado_e_erro_") \; local
N = x:getSize() \; local L = 2/2^a[1] \; for i = 0 \, N-1 do \; x[i]
= a[2]*math.sin(2*math.pi*2*i/N) \; y[i] = -1+L*(0.5+math.floor((2/L-1e-8)*(0.5+0.5*x[i])))
\; z[i] = (i%2==0 and x[i]) or y[i] \; w[i] = x[i]-y[i] \; end \;;
#X f 66;
#X obj 565 61 s \$0_117B_bits_r;
#X obj 815 61 s \$0_117B_vol_r;
#X obj 565 121 r \$0_117B_bits_s;
#X obj 785 121 r \$0_117B_vol;
#X obj 612 278 s \$0_117B_res_amp_r;
#X obj 819 278 s \$0_117B_sqnr;
#X obj 715 308 s \$0_117B_amp_erro;
#X connect 1 0 18 0;
#X connect 9 0 30 0;
#X connect 9 1 29 0;
#X connect 18 0 33 0;
#X connect 21 0 22 0;
#X connect 22 0 34 0;
#X connect 27 0 9 0;
#X connect 28 1 27 0;
#X connect 28 2 30 1;
#X connect 28 3 29 1;
#X connect 29 0 37 0;
#X connect 29 1 39 0;
#X connect 29 2 38 0;
#X connect 30 0 32 0;
#X connect 35 0 27 0;
#X connect 36 0 28 0;
#X coords 0 -1 1 1 550 450 2 0 0;
#X restore 630 121 pd \$0_icsm117Bfig;
#X text 676 570 obs: abra o subpatch acima para ver os comentários
;
#X text 180 466 (e é possível medir SQNR em bits!);
#X connect 1 0 2 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm117B;
#X obj 100 80 cnv 15 14 14 empty empty Quantização_Linear 0 0 0 24
-262144 -38 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117A_mapa_de_quantização 1024 float 0;
#X coords 0 1 1023 0 300 200 1 0 0;
#X restore 100 143 graph;
#N canvas 0 0 686 410 init 0;
#X obj 61 25 loadbang;
#X obj 61 124 r \$0_117A_B;
#X obj 61 83 s \$0_117A_B_r;
#X msg 61 54 4;
#X obj 61 154 ofelia f \; local x=ofArray("\$0_117A_mapa_de_quantização")
\; local y=ofArray("\$0_117A_mapa_de_dequantização") \; local N=x:getSize()
\; local L=2/2^a \; for n=0 \, N-1 do \; x[n] = math.floor(2*(n/N)/L)/2^a
\; y[n] = -1+L/2+L*math.floor(2^a*n/N) \; end \;;
#X connect 0 0 3 0;
#X connect 1 0 4 0;
#X connect 3 0 2 0;
#X restore 1178 826 pd init;
#X floatatom 451 143 8 1 24 0 B= #0_117A_B_r #0_117A_B;
#X text 86 346 -1;
#X text 386 346 +1;
#X text 86 332 0;
#X text 76 142 2;
#X text 86 132 B;
#X text 426 187 Na QUANTIZAÇÃO LINEAR com B bits o intervalo de representação
\, no nosso caso o intervalo [-1 \, +1) \, é subdividido em 2^B intervalos
iguais de largura L=2/2^B. Esse valor L \, denominado RESOLUÇÃO DE
AMPLITUDE \, representa a menor distinção possível entre quaisquer
dois valores de amplitude instantânea no sinal. Cada valor x em [-1
\, +1) é associado a um CÓDIGO q(x) = floor((x+1)/L) que representa
o intervalo correspondente. Observe que o valor de amplitude máxima
x=+1 precisaria ser incorporado ao último intervalo (os códigos são
0 \, 1 \, ... \, 2^B-1)., f 75;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_117A_mapa_de_dequantização 1024 float 0;
#X coords 0 1 1023 -1 300 200 1 0 0;
#X restore 100 403 graph;
#X text 73 592 -1;
#X text 73 393 +1;
#X text 93 602 0;
#X text 391 602 2;
#X text 401 592 B;
#X text 426 397 Para reconstruir o sinal a partir dos códigos q(x)
usa-se um mapa de DEQUANTIZAÇÃO d(q) que associa aos intervalos um
valor de amplitude REPRESENTANTE \, sendo algumas alternativas comuns
o ponto médio do intervalo \, ou um de seus extremos. Tomando por
exemplo o extremo inferior de cada intervalo \, teríamos d(q)=-1+qL
e o maior erro de quantização é L. Escolhendo os pontos médios
dos intervalos \, temos d(q)=-1+L/2+qL \, e o maior erro cometido nesse
caso está limitado por L/2., f 75;
#X connect 1 0 2 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm117A;
#X text 100 250 A quantização de um sinal analógico \, que corresponde
à discretização do eixo da amplitude \, é uma etapa essencial na
conversão AD \, onde cada valor de amplitude instantânea x[n] amostrado
de um sinal analógico x(t) é representado usando uma CODIFICAÇÃO
FINITA. Nesta seção exploraremos em maior profundidade as diversas
consequências da escolha de um esquema específico de quantização
na representação digital de um sinal. Em particular \, veremos em
detalhe o esquema de QUANTIZAÇÃO LINEAR usando B bits e como mensurar
e perceber o RUÍDO DE QUANTIZAÇÃO correspondente., f 107;
#X text 100 380 A primeira e mais importante diferença entre a discretização
das amplitudes instantâneas e a discretização temporal (amostragem)
é que a quantização é um processo de CODIFICAÇÃO COM PERDAS \,
já que cada valor amostrado x[n] \, pertencente a um INTERVALO DA
RETA REAL \, é transformado por um mapeamento q(·) em um valor q(x[n])
dentre um CONJUNTO FINITO de códigos disponíveis \, o que torna esse
mapeamento necessariamente NÃO-INVERSÍVEL., f 107;
#X text 100 490 Dado um sinal de tempo discreto x[n] e um mapa de quantização
q(·) \, chamamos de RUÍDO DE QUANTIZAÇÃO ao sinal discreto ε[n]
= x[n]-q(x[n]) \, e a RELAÇÃO SINAL - RUÍDO DE QUANTIZAÇÃO (SQNR
= Signal to Quantization Noise Ratio) será a razão entre a energia
do sinal e a energia do ruído \, geralmente expressa em decibeis como
SQNR(dB) = 10·log_10(Energia(x)/Energia(ε)) = 20·log_10(Amplitude(x)/Amplitude(ε)).
, f 107;
