#N canvas 0 0 1280 700 16;
#X declare -lib zexy;
#X obj 0 0 icsm_cabecalho;
#X obj 100 200 cnv 15 14 14 empty empty 1.1.4_Processamento_em_tempo_real
0 0 0 34 -262144 -38 0;
#X text 100 405 Porém \, contrariamente a um circuito elétrico analógico
\, que de fato possui fluxos elétricos trafegando simultaneamente
em todas as suas componentes (incluindo entradas e saídas) \, um computador
(mesmo um multicore) manipula unidades discretas de informação através
de interrupções e escalonamento e sincronização de processos. Assim
\, a aparente fluidez e continuidade do processamento de sinais em
Puredata é alcançada graças a um sofisticado sistema de SEGMENTAÇÃO
do sinal em BLOCOS e gerenciamento de um GRAFO de todas as unidades
de DSP \, que garante o correto escalonamento entre o processamento
de todos os blocos na ordem em que aparecem no patch., f 107;
#N canvas 0 0 1280 700 icsm114A 0;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm114A vis 1;
#X text 100 123 O tamanho default dos blocos de DSP em tempo real em
Puredata é de 64 amostras \, o que corresponde aproximadamente a 1.45
ms. Isso significa que a cada 1.45 ms todos os objetos DSP recebem
vetores de 64 amostras em suas entradas de áudio e são obrigados
a produzir vetores de 64 amostras em suas saídas de áudio. Além
disso \, se um objeto [B] recebe sua entrada de um objeto [A] \, necessariamente
o processamento de [A] precisa estar concluído antes do início do
processamento de [B] \, a fim de garantir que todos os objetos processam
blocos que correspondem a um mesma janela de 1.45 ms do tempo real.
Consequentemente \, o grafo DSP deve ser necessariamente ACÍCLICO
(falaremos mais sobre isso na seção de FILTROS)., f 107;
#X obj 100 80 cnv 15 14 14 empty empty Objetos_DSP 0 0 0 24 -262144
-38 0;
#X text 100 419 A quantidade e diversidade de objetos DSP em Puredata
é enorme \, tanto de objetos "nativos" quanto de objetos adicionados
por bibliotecas (que podem ser ABSTRACTIONS \, ou seja \, objetos escritos
em Pd \, ou ainda EXTERNALS \, que são objetos escritos em C e compilados
para seu uso em Pd). Fazer uma apresentação exaustiva de objetos
Pd \, além de irrelevante (você pode acessar o menu Ajuda->Lista
de objetos) \, foge totalmente ao escopo deste material. Apresentaremos
sempre os objetos necessários à ilustração e entendimento de conceitos
e técnicas em SMC., f 107;
#N canvas 0 0 1280 700 icsm114B 0;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm114B vis 1;
#X obj 100 80 cnv 15 14 14 empty empty Sinais_elementares_revisitados
0 0 0 24 -262144 -38 0;
#X obj 365 248 vradio 24 1 1 5 empty empty empty 0 -8 0 10 -262130
-1 -1 0;
#X text 397 273 RUÍDO;
#X obj 415 376 noise~;
#X obj 464 406 osc~ 400;
#X obj 365 625 dac~;
#X text 397 248 SILÊNCIO;
#X text 397 296 SENOIDE;
#X text 397 321 DENTE-DE-SERRA;
#X text 397 344 QUADRADA;
#X obj 513 436 phasor~ 400;
#X obj 563 527 sgn~;
#N canvas 0 0 1280 700 icsm114C 0;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm114C vis 1;
#X obj 100 80 cnv 15 14 14 empty empty Produção_de_sinais_com_[ofelia]
0 0 0 24 -262144 -38 0;
#X obj 634 336 ofelia function -s11 \; for i=1 \, #a1 do \; a1[i] =
-1+2*math.random() \; end \; return a1 \;;
#X obj 536 510 dac~;
#X obj 536 471 multiplex~;
#X obj 536 265 tgl 24 0 empty empty Liga/Desliga_ruído_branco_em_Lua
28 12 0 18 -262130 -1 -1 0 1;
#X text 100 133 Os scripts em Lua através do objeto [ofelia] também
permitem a geração de sinais em tempo real. Uma reimplementação
em Lua do objeto [noise~] pode ser vista abaixo. A implementação
de um objeto como o [osc~] é um pouco mais complicada \, e será vista
no capítulo 2, f 107;
#N canvas 0 0 580 315 icsm114C+ 0;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X text 6 801 comentários:;
#X text 32 20 Essa implementação usa um objeto [ofelia function]
com um argumento -s11 \, que diz que essa função possui 1 inlet e
1 outlet do tipo "sinal". O parâmetro contendo o sinal de entrada
se chama a1 \, e é uma tabela em Lua. Diferentemente dos vetores em
Pd \, tabelas em Lua são indexadas entre 1 e o tamanho da tabela (#a1
nesse exemplo). Ainda que esse objeto não precisasse de entrada \,
esse parâmetro é útil aqui pois será usado como espaço de escrita
para o sinal a ser sintetizado na saída \, e já possui o tamanho
necessário (que é 64 no caso default \, mas poderia ser diferente
dependendo dos argumentos com os quais o Pd foi chamado)., f 51;
#X msg 189 801 \; pd-icsm114C+ vis 1;
#X connect 0 0 3 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 727 447 pd icsm114C+;
#X obj 309 262 icsm_dsp;
#X connect 1 0 2 0;
#X connect 4 0 6 1;
#X connect 6 0 5 0;
#X connect 6 0 5 1;
#X connect 7 0 6 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm114C;
#X text 100 113 Aproveitando nossa familiaridade com os sinais elementares
\, podemos discutir aqui os objetos nativos do Pd que realizam o mesmo
tipo de SÍNTESE em regime de TEMPO REAL:, f 107;
#N canvas 0 0 813 632 icsm114B+ 0;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm114B+ vis 1;
#X text 60 63 [noise~]: ruído branco, f 50;
#X text 60 33 Objetos novos nessa implementação:, f 50;
#X text 60 93 [osc~]: oscilador senoidal, f 50;
#X text 168 143 esse objeto produz um dente-de-serra no intervalo [0
\, 1] \, útil para controlar fases de outros geradores de sinal.;
#X text 60 123 [phasor~]: "fasor" = gerador de fases;
#X text 60 213 [+~] \, [*~]: usados para ajustar a escala do fasor
, f 50;
#X text 60 243 [sgn~]: sinal (+1 \, 0 \, -1), f 50;
#X text 6 801 comentários:;
#X text 60 283 Observe que estes são objetos que sintetizam essas
formas de onda em fluxo contínuo e de forma ininterrupta \, e por
isso precisamos de um mecanismo adicional para controlar o direcionamento
desses fluxos. Na implementação a seguir \, isso é feito através
do objeto [multiplex~] da biblioteca zexy \, que seleciona 1 dentre
N fluxos conforme o valor inteiro recebido no primeiro inlet. A biblioteca
zexy exige uma inicialização \, realizada pelo objeto [declare -lib
zexy] ao lado do [multiplex~]., f 68;
#X text 60 463 Note que os vetores contendo os blocos de 64 amostras
ficam "implícitos" nessa implementação \, trafegando nas conexões
entre objetos "~". O vetor no patch serve apenas para ilustrar o início
do sinal gerado a cada troca de forma de onda \, acionando a interface
[bng] conectada ao [tabwrite~]., f 68;
#X connect 0 0 1 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 680 520 pd icsm114B+;
#X obj 365 566 multiplex~ 0 1 2 3 4;
#X obj 422 625 tabwrite~ \$0_114B_sinal;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_114B_sinal 882 float 0;
#X coords 0 1.1 881 -1.1 500 280 1 0 0;
#X restore 680 227 graph;
#X obj 422 599 bng 20 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 513 465 *~ 2;
#X obj 513 495 -~ 1;
#X obj 183 241 icsm_dsp;
#X obj 575 566 declare -lib zexy;
#X connect 1 0 2 0;
#X connect 4 0 18 0;
#X connect 4 0 21 0;
#X connect 6 0 18 1;
#X connect 7 0 18 2;
#X connect 13 0 22 0;
#X connect 14 0 18 4;
#X connect 18 0 8 0;
#X connect 18 0 8 1;
#X connect 18 0 19 0;
#X connect 21 0 19 0;
#X connect 22 0 23 0;
#X connect 23 0 14 0;
#X connect 23 0 18 3;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm114B;
#X text 100 289 Por convenção \, os nomes dos objetos DSP em Pd são
terminados por um acento til. Já vimos alguns destes objetos na seção
sobre as conversões AD e DA \, os objetos [adc~] \, [dac~] \, [tabwrite~]
e [tabplay~]. Além desta convenção \, os inlets/outlets de sinais
e as conexões entre esses inlets e outlets são visualmente mais espessas
do que os inlets/outlets e conexões que lidam com informações mais
simples \, como disparos (bang) \, números (float) e cadeias alfanuméricas
(symbol)., f 107;
#X connect 1 0 2 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm114A;
#X text 100 250 Os sinais elementares gerados anteriormente foram construídos
tendo como suporte um vetor em Pd \, cujos índices representam uma
linha do tempo (medida em amostras ou intervalos de 1/R segundos) \,
sendo que sua construção ocorre num momento diferente daquele associado
aos dispositivos de captura e reprodução. Em oposição a essa dualidade
entre o tempo do processamento e o tempo de captura/reprodução \,
o Puredata implementa um modelo de PROCESSAMENTO DE FLUXOS em TEMPO
REAL \, onde os sinais de áudio são capturados \, processados e reproduzidos
em fluxo contínuo e simultaneamente \, ou ao menos assim o aparentam.
, f 107;
