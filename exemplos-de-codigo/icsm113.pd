#N canvas 0 0 1280 700 16;
#X obj 0 0 icsm_cabecalho;
#X obj 100 200 cnv 15 14 14 empty empty 1.1.3_Sinais_elementares 0
0 0 34 -262144 -38 0;
#N canvas 0 0 1280 700 icsm113A 0;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm113A vis 1;
#N canvas 0 0 1280 700 icsm113B 0;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm113B vis 1;
#N canvas 0 0 1280 700 icsm113C 0;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm113C vis 1;
#N canvas 0 0 1280 700 icsm113D 0;
#X text 6 801 continua:;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_113D 88200 float 2;
#X coords 0 1.1 882 -1.1 1000 280 1 0 0;
#X restore 101 314 graph;
#X obj 929 160 dac~;
#X obj 929 84 bng 24 250 50 0 empty empty toca 28 12 0 16 -262130 -1
-1;
#X obj 100 80 cnv 15 14 14 empty empty Geração_de_Senoides 0 0 0
28 -262144 -38 0;
#X floatatom 501 108 8 20 20000 1 Hz - -;
#N canvas 0 0 1280 700 icsm113E 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_113E 88200 float 0;
#X coords 0 1.1 882 -1.1 1000 280 1 0 0;
#X restore 103 314 graph;
#X obj 942 267 dac~;
#X obj 942 191 bng 24 250 50 0 empty empty toca 28 12 0 16 -262130
-1 -1;
#X obj 100 80 cnv 15 14 14 empty empty Sinais_do_tipo_Dente-de-Serra
0 0 0 28 -262144 -38 0;
#X floatatom 401 220 8 0 0 1 Hz - -;
#N canvas 0 0 1280 700 icsm113F 0;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_113F 88200 float 0;
#X coords 0 1.1 882 -1.1 1000 280 1 0 0;
#X restore 102 314 graph;
#X obj 940 257 dac~;
#X obj 940 181 bng 24 250 50 0 empty empty toca 28 12 0 16 -262130
-1 -1;
#X obj 100 80 cnv 15 14 14 empty empty Forma_de_onda_Quadrada 0 0 0
28 -262144 -38 0;
#X floatatom 403 219 8 0 0 1 Hz - -;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm113F vis 1;
#X obj 940 218 tabplay~ \$0_113F;
#X text 98 601 obs: esse gráfico mostra 20 milissegundos do sinal
;
#N canvas 0 0 698 460 quadrada 0;
#X obj 41 193 inlet;
#X obj 41 227 ofelia f \; local x=ofArray("\$0_113F") \; local amp=0
\; local delta=2*a/44100 \; for i=0 \, x:getSize()-1 do \; x[i]=(amp>0
and 1) or (amp==0 and 0) or -1 \; amp=amp+delta \; if amp>1 then amp=amp-2
end \; end;
#X text 40 36 Uma forma de onda quadrada pode ser gerada a partir de
qualquer um dos sinais periódicos anteriores usando-se o operador
"sinal" (sinal(α) = +1 se α>0 \, 0 se α==0 e -1 caso contrário).
Em Lua \, por causa de como são definidos os operadores lógicos \,
é possível usar a expressão:, f 61;
#X text 128 138 (α>0 and 1) or (α==0 and 0) or -1;
#X connect 0 0 1 0;
#X restore 403 254 pd quadrada;
#X text 400 181 Escolha uma frequência:;
#X text 100 110 Esse é um sinal que alterna entre os extremos +1 e
-1 periodicamente \, de acordo com a frequência especificada. Como
a dente-de-serra \, a forma de onda quadrada também pode ser produzida
de várias maneiras., f 107;
#X obj 99 178 icsm_dsp;
#X connect 2 0 8 0;
#X connect 4 0 10 0;
#X connect 6 0 7 0;
#X connect 8 0 1 0;
#X connect 8 0 1 1;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm113F;
#X text 6 801 continua:;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm113E vis 1;
#X obj 942 228 tabplay~ \$0_113E;
#X text 100 601 obs: esse gráfico mostra 20 milissegundos do sinal
;
#N canvas 0 0 976 470 dente-de-serra 0;
#X obj 51 163 inlet;
#X text 115 163 o objeto [inlet] recebe informações do patch principal
\, no caso a frequência do sinal., f 56;
#X obj 51 237 ofelia f \; local x=ofArray("\$0_113E") \; local amp=0
\; local delta=2*a/44100 \; for i=0 \, x:getSize()-1 do \; x[i]=amp
\; amp=amp+delta \; if amp>1 then amp=amp-2 end \; end;
#X text 50 37 Esse é um exemplo de SUBPATCH \, criado com o objeto
[pd NOME_DO_SUBPATCH]. O objetivo de usar subpatches é modularizar
a implementação \, e ao mesmo tempo despoluir o patch \, permitindo
a construção de interfaces visualmente mais "leves"., f 63;
#X text 339 239 A geração do sinal dente-de-serra tem várias similaridades
com a implementação do sinal senoidal. O passo d=2*a/44100 aqui reflete
o fato de que cada "dente" percorre 2 unidades de amplitude (-1...+1)
por período (onde 1 período = 1/a segundos = 44100/a amostras). Já
a correção de amplitude amp=amp-2 garante que o sinal preserva a
frequência correta mesmo no caso de períodos fracionários (onde
qualquer "resíduo" de amplitude acima de 1 na verdade já pertence
ao próximo período do sinal)., f 57;
#X connect 0 0 2 0;
#X restore 401 249 pd dente-de-serra;
#X text 397 191 Escolha uma frequência para o sinal:;
#X text 100 110 Um sinal do tipo DENTE-DE-SERRA nada mais é do que
uma rampa linear que se repete periodicamente. Existem muitas maneiras
de produzir esse sinal. Na implementação abaixo \, ele é computado
através de uma função linear que é "embrulhada" (wrapped) no intervalo
[-1 \, +1]., f 107;
#X text 581 250 <- clique aqui!;
#X obj 100 188 icsm_dsp;
#X connect 2 0 9 0;
#X connect 4 0 11 0;
#X connect 7 0 8 0;
#X connect 9 0 1 0;
#X connect 9 0 1 1;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm113E;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X msg 189 801 \; pd-icsm113D vis 1;
#X obj 929 121 tabplay~ \$0_113D;
#N canvas 0 0 608 263 icsm113D+ 0;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X text 6 801 comentários:;
#X msg 189 801 \; pd-icsm113D+ vis 1;
#X text 22 14 O código em Lua é parecido com o anterior \, e poderia
ser idêntico a menos da linha x[i]=math.sin(2*math.pi*a*i/44100).
Entretanto \, para economizar computação \, usamos uma variável
local para representar a fase instantânea (argumento da função seno)
e uma variável delta para o incremento de fase entre uma amostra e
outra (que é constante e corresponde à expressão 2*math.pi*a/44100).
O símbolo especial "a" é usado em ofelia como sinônimo do parâmetro
de entrada da função \, nesse caso a frequência da senoide., f
54;
#X connect 0 0 2 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 914 254 pd icsm113D+;
#X text 499 59 Escolha uma frequência para a senoide (por exemplo
400 Hz):, f 37;
#X text 98 601 obs: esse gráfico mostra 20 milissegundos do sinal
;
#X text 927 59 Toque o sinal:;
#X obj 501 141 ofelia f \; local x=ofArray("\$0_113D") \; local fase=0
\; local delta=2*math.pi*a/44100 \; for i=0 \, x:getSize()-1 do \;
fase=fase+delta \; x[i]=math.sin(fase) \; end;
#X obj 101 138 icsm_dsp;
#X connect 3 0 9 0;
#X connect 5 0 14 0;
#X connect 7 0 8 0;
#X connect 9 0 2 0;
#X connect 9 0 2 1;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm113D;
#X obj 100 80 cnv 15 14 14 empty empty Sinais_Periódicos_e_Senoides
0 0 0 28 -262144 -38 0;
#X text 100 250 Apesar de não existirem na natureza sons perfeitamente
periódicos (assim como não existem músicas que durem toda a eternidade)
\, o conceito de periodicidade é muito útil \, pois a frequência
aproximada associada a um recorte sonoro aproximadamente periódico
está relacionada ao conceito de ALTURA MUSICAL (atributo que permite
diferenciar sons agudos e graves)., f 107;
#X text 100 489 Frequentemente representamos um sinal senoidal com
a expressão x(t)=sen(2πft) \, onde f=ω/(2π) é a frequência em
Hz. Note que usando a frequência em Hz temos que o período se expressa
como τ=2π/ω=1/f \, como no caso periódico em geral., f 107;
#X text 100 120 SINAIS PERIÓDICOS são aqueles que satisfazem x(t)=x(t+τ)
para qualquer t e para um valor de τ>0 medido em segundos e chamado
de PERÍODO da função (o período é o menor valor de τ>0 que satisfaz
essa propriedade). Associado ao conceito de PERÍODO está a ideia
de FREQUÊNCIA \, que é a quantidade de vezes que o sinal se repete
por segundo \, e que se expressa como f=1/τ Hz (por uma regra de três:
1 ciclo a cada τ segundos equivale a 1/τ ciclos por segundo)., f
107;
#X text 100 360 SINAIS SENOIDAIS formam uma importante subclasse dos
sinais periódicos \, sendo definidos por expressões como x(t)=sen(ωt+φ°)
\, onde ω é um valor real denominado FREQUÊNCIA ANGULAR (medida
em radianos por segundo) e φ° é a FASE INICIAL \, medida em radianos
(em geral \, o argumento angular φ(t)=ωt+φ° da função seno é
denominado FASE \, de onde se vê que φ°=φ(0)). O período desta
senoide é τ=2π/ω segundos \, que é o menor valor positivo que
satisfaz \, para qualquer t \, a propriedade x(t+τ)=sen(ω(t+2π/ω)+φ°)=sen(ωt+2π+φ°)=sen(ωt+φ°)=x(t).
, f 107;
#X connect 1 0 2 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm113C;
#N canvas 0 0 450 250 (subpatch) 0;
#X array \$0_113B 88200 float 2;
#X coords 0 1.1 882 -1.1 1000 280 1 0 0;
#X restore 100 317 graph;
#X obj 706 254 dac~;
#X obj 706 174 bng 24 250 50 0 empty empty toca 28 12 0 16 -262130
-1 -1;
#X obj 331 174 bng 24 250 50 0 empty empty gera_sinal 28 12 0 16 -262130
-1 -1;
#X obj 100 80 cnv 15 14 14 empty empty Experimento_com_Ruído 0 0 0
28 -262144 -38 0;
#X text 100 100 Para permitirmos a manipulação direta das listas
de amostras de uma forma simples e intuitiva \, usamos a linguagem
Lua através do objeto [ofelia] para preencher um vetor do Pd com um
RUÍDO BRANCO \, usando valores produzidos pela função math.random().
Clique nos botões abaixo na ordem em que aparecem:, f 107;
#X obj 331 204 ofelia f \; local x=ofArray("\$0_113B") \; for i=0 \,
x:getSize()-1 do \; x[i]=-1+2*math.random() \; end;
#X obj 706 215 tabplay~ \$0_113B;
#N canvas 0 0 594 626 icsm113B+ 0;
#X obj 139 803 bng 30 250 50 0 empty empty empty 17 7 0 10 -262130
-1 -1;
#X text 6 801 comentários:;
#X text 22 409 O vetor possui 88200 pontos (2 segundos de áudio) \,
porém a visualização está configurada para mostrar apenas 882 amostras
(0.2s) \, para que possamos discernir ao menos o início do sinal.
Você pode abrir as "Propriedades da Tela" e alterar a "amplitude de
X" \, colocando por exemplo "de 0 a 88200" para visualizar o vetor
inteiro \, ou "de 500 a 2000" para ver apenas essas amostras (mas o
resto do vetor também será desenhado!)., f 54;
#X text 22 14 O primeiro trecho usa uma chave ([toggle]) para ligar/desligar
o processamento DSP do Pd (mensagem | \; pd dsp 1<) e um botão ([bng])
para acionar o objeto [tabplay~] \, que envia o sinal de áudio para
os dois canais da saída de áudio (objeto [dac~])., f 54;
#X text 22 124 O código em Lua começa com a declaração [ofelia
f] \, que é um atalho para [ofelia function] \, que define uma função
em Lua. A segunda linha vincula a variável local x (do código em
Lua) com o vetor \$0_113A do Pd \, que possui tamanho 88200 (2 segundos
de áudio a 44100 Hz). O laço for percorre todas as posições do
vetor (entre 0 e x:getSize()-1=88199) \, preenchendo-as com valores
aleatórios no intervalo [-1 \, +1] (a função math.random() devolve
valores no intervalo [0 \, 1]). Pela forma como o Pd trata os textos
dentro de objetos \, não é possível usar endentação nesse laço
(não se preocupe \, veremos futuramente como usar códigos em Lua
visualmente bem organizados em arquivos de texto)., f 54;
#X msg 189 801 \; pd-icsm113B+ vis 1;
#X connect 0 0 5 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 920 262 pd icsm113B+;
#X text 98 601 obs: esse gráfico mostra 20 milissegundos do sinal
;
#X obj 102 171 icsm_dsp;
#X connect 1 0 2 0;
#X connect 6 0 11 0;
#X connect 7 0 10 0;
#X connect 11 0 5 0;
#X connect 11 0 5 1;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 997 601 pd icsm113B;
#X obj 100 80 cnv 15 14 14 empty empty Ruídos 0 0 0 28 -262144 -38
0;
#X text 100 120 DEFINIÇÕES E DIFICULDADES: Em teoria da informação
(também em DSP) ruído é qualquer sinal indesejado adicionado à
informação desejada. Em SMC \, ruído é uma categoria sem fronteiras
claramente definidas \, que abrange uma infinidade de sons que podem
ser musicalmente muito interessantes., f 107;
#X text 100 200 Geralmente \, ruídos não possuem altura musical definida.
Entretanto \, existem vários sons sem altura musical definida que
não são geralmente denominados ruídos \, tais como gongos \, sinos
\, etc. Ruídos musicais costumam não ser periódicos ou quase-periódicos
\, mas existem exceções \, como sons de máquinas \, veículos \,
apitos \, etc., f 107;
#X text 180 370 o RUÍDO BRANCO (associado a amostradas aleatórias
independentes \, e que possui energia identicamente distribuída em
todas as faixas de frequência) \,, f 76;
#X text 180 430 o RUÍDO VERMELHO (associado ao movimento Browniano
e com energia decrescente como 1/f² em função da frequência) \,
, f 76;
#X text 180 490 o RUÍDO ROSA (que possui distribuição de energia
1/f \, entre o branco e o vermelho \, e energia constante por oitavas)
, f 76;
#X text 180 550 e o RUÍDO CINZA (nível perceptual constante em todas
as frequências)., f 76;
#X obj 1118 548 icsm_url https://en.wikipedia.org/wiki/Colors_of_noise
;
#X text 994 531 para mais informações:, f 12;
#X text 100 290 CARACTERIZAÇÕES DE RUÍDOS: ruídos podem ser caracterizados
de acordo com a faixa de frequência que ocupam (ruídos de banda-larga
ou banda-estreita) e também através de uma nomenclatura de cores
associadas à sua distribuição de energia no espectro. Neste sistema
de classificação encontramos:, f 107;
#X connect 1 0 2 0;
#X coords 0 -1 1 1 180 36 2 0 800;
#X restore 1000 600 pd icsm113A;
#X text 100 270 Nesta seção veremos como construir em Pd alguns dos
tipos mais elementares de sinais considerados na teoria de processamento
de sinais: RUÍDOS e SINAIS PERIÓDICOS \, dentre os quais os SINAIS
SENOIDAIS \, DENTE-DE-SERRA e a FORMA DE ONDA QUADRADA., f 107;
#X text 100 370 Nessa seção veremos as definições destes sinais
\, bem como sua construção em Pd. Em outras seções exploraremos
várias características matemáticas e perceptuais destes sinais.
, f 107;
